/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.student;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class SubmitReport extends javax.swing.JFrame {
    String AssessmentFile = "AssessmentType.txt" ;
    String RemarkFile = "Remark.txt";
    String PreDateFile ="Presentation Request.txt";
    String reportFile = "Report.txt";
        FileUtil f = new FileUtil();
        File file = new File(f.getFileLocation(reportFile));
        FileUtil af = new FileUtil();
        File Afile = new File(af.getFileLocation(AssessmentFile));
        FileUtil rf = new FileUtil();
        File Rfile = new File(rf.getFileLocation(RemarkFile));
        FileUtil pf = new FileUtil();
        File Pfile = new File(pf.getFileLocation(PreDateFile));
        StudentMain studentMain = new StudentMain();

    /**
     * Creates new form SubmitReport
     * @param student
     */
    private String TpNumber;
    private String Intake;
    
    public SubmitReport(String TpNumber,String Intake) {
        initComponents();
        this.TpNumber = TpNumber;
        this.Intake = Intake;
        ConfirmEditBtn.setVisible(false);
        DefaultTableModel model = (DefaultTableModel)AssessmentTable.getModel();
        AssessmentTable.setDefaultEditor(Object.class, null);
        
        try {
            BufferedReader br = new BufferedReader(new FileReader(Afile));
            br.readLine();
            
            Object[] tableLines = br.lines().toArray();
            
            
            for(int i =0; i<tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataRow  = line.split("@");
                for (int j = 0; j < dataRow.length; j++) {
                   dataRow[j] = dataRow[j].trim();
            
                }
                if (dataRow[0].equals(TpNumber)){
                    
                    Object[] rowData = {dataRow[2],"Pending"};
                    model.addRow(rowData);
                    AssessmentTypeComboBox.addItem(dataRow[2]);
                    
                } else if (dataRow[1].equals(Intake)){
                    
                   Object[] rowData = {dataRow[2],"Pending"};
                    model.addRow(rowData);
                    AssessmentTypeComboBox.addItem(dataRow[2]);
                }
                
            }
            
        } catch (Exception ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            br.readLine();
            Object[] tableLines = br.lines().toArray();
            
            for(int i =0; i<tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataRow  = line.split("@");
                for (int j = 0; j < dataRow.length; j++) {
                   dataRow[j] = dataRow[j].trim();
            
                }
                for(int counter =0; counter<model.getRowCount(); counter++ ){
                    if (dataRow[3].equals(TpNumber) && dataRow[2].equals(model.getValueAt(counter, 0))){
                        model.setValueAt("Submitted", counter, 1);
                } 
                
                }
            }
            
        } catch (Exception ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private SubmitReport() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        AssessmentTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        AssessmentTypeComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        SumbitLinkTxt = new javax.swing.JTextField();
        SubmitBtn = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();
        EditBtn = new javax.swing.JButton();
        ConfirmEditBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AssessmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AssessmentType", "Status"
            }
        ));
        jScrollPane1.setViewportView(AssessmentTable);

        jLabel1.setText("Assessment You want to submit/delete/edit:");

        jLabel2.setText("Submit Link:");

        SubmitBtn.setText("Submit");
        SubmitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitBtnActionPerformed(evt);
            }
        });

        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        EditBtn.setText("Edit");
        EditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBtnActionPerformed(evt);
            }
        });

        ConfirmEditBtn.setText("Confirm Edit");
        ConfirmEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmEditBtnActionPerformed(evt);
            }
        });

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BackBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AssessmentTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SumbitLinkTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SubmitBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(DeleteBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EditBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ConfirmEditBtn)))))))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AssessmentTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SumbitLinkTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubmitBtn)
                    .addComponent(DeleteBtn)
                    .addComponent(EditBtn)
                    .addComponent(ConfirmEditBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BackBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitBtnActionPerformed
        // TODO add your handling code here:
        int maxId = 0;
        String submitLink = SumbitLinkTxt.getText();
        String selectedAssessment = (String) AssessmentTypeComboBox.getSelectedItem();
        if(submitLink.isEmpty() || selectedAssessment == null){
            JOptionPane.showMessageDialog(null, "Please provide Submit Link.", "Error", JOptionPane.ERROR_MESSAGE);
            } else{
            
            
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            reader.readLine();    
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("@");
                if (parts.length > 0) {
                    String reportId = parts[0];
                    if (reportId.startsWith("R")) {
                        int currentId = Integer.parseInt(reportId.substring(1).trim());
                        if (currentId > maxId) {
                            maxId = currentId;
                        }
                    }
                }
            }
            reader.close();
        }   catch (FileNotFoundException ex) {
                Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) { 
                Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
            }

        // Increment the maximum ID found
        int nextId = maxId + 1;
        String newReportId = String.format("R%02d", nextId);
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");  
        LocalDateTime now = LocalDateTime.now();
        String CurrentDateTime = dtf.format(now);
        Project project = new Project(newReportId,CurrentDateTime,selectedAssessment,TpNumber,"Pending","","");
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file, true))) {
            String[] dataRow ={newReportId,CurrentDateTime,selectedAssessment,TpNumber,"Pending","-","-"};
            writer.write(String.join(" @ ", dataRow));
            writer.newLine();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(Rfile, true))) {
            String[] dataRow ={newReportId,"","","","","",submitLink};
            writer.write(String.join(" @ ", dataRow));
            writer.newLine();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(Pfile, true))) {
            String[] dataRow ={newReportId,"","Pending"};
            writer.write(String.join(" @ ", dataRow));
            writer.newLine();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        DefaultTableModel model = (DefaultTableModel)AssessmentTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
    if (selectedAssessment.equals(model.getValueAt(i, 0))) {
        model.setValueAt("Submitted", i, 1);
    }
    }
        }
    }//GEN-LAST:event_SubmitBtnActionPerformed

    
    
    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        // TODO add your handling code here:
        String selectedAssessment = (String) AssessmentTypeComboBox.getSelectedItem();
        List<String[]> lines = new ArrayList<>();
        String ReportId = studentMain.getReportId(selectedAssessment,TpNumber);
         try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
             reader.readLine();
             String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line.split(" @ "));
            } 
         }catch (IOException e) {
            e.printStackTrace();
        }
        boolean found = false;       
        for (int i = 0; i < lines.size(); i++) {
            String[] line = lines.get(i);
            if (line[0].equals(ReportId)) { // Adjust condition based on your identifier
                found = true;               
                lines.remove(i);
                studentMain.setSelectedLine(i);
                DefaultTableModel model = (DefaultTableModel)AssessmentTable.getModel();
                for (int m = 0; m < model.getRowCount(); m++) {
                    if (selectedAssessment.equals(model.getValueAt(m, 0))) {
                    model.setValueAt("Pending", m, 1);
                    }
                }
            }
           }
        // If the StudentId and ProjectName are not found, print a message
        if (!found) {
            JOptionPane.showMessageDialog(null, "You cannot delete report that you haven't submitted.", "Error", JOptionPane.ERROR_MESSAGE);
             return;
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
             writer.write("ReportID , Date , AssessmentType , StudentID , Status , SupervisorID , SecondMarkerID");
             writer.newLine();
            for (String[] lineTest : lines) {
                writer.write(String.join(" @ ", lineTest));
                writer.newLine();
            }
        } catch (IOException ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            List<String[]> Rlines = new ArrayList<>();
            try (BufferedReader reader = new BufferedReader(new FileReader(Rfile))) {
             reader.readLine();
             String Rline;
            while ((Rline = reader.readLine()) != null) {
                Rlines.add(Rline.split(" @ "));   
            }  Rlines.remove(studentMain.getSelectedLine());
            }catch (IOException e) {
            e.printStackTrace();
            }
        
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(Rfile))) {
             writer.write("ReportID , Feedback , Feedback2, Result1, Result2, Result, Submit Link");
             writer.newLine();
            for (String[] Rline : Rlines) {
                writer.write(String.join(" @ ", Rline));
                writer.newLine();
            }
            } catch (IOException ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
            /*delete in Pfile*/
            List<String[]> Plines = new ArrayList<>();
            try (BufferedReader reader = new BufferedReader(new FileReader(Pfile))) {
             reader.readLine();
             String Pline;
            while ((Pline = reader.readLine()) != null) {
                Plines.add(Pline.split(" @ "));                
            }Plines.remove(studentMain.getSelectedLine()); 
            }catch (IOException e) {
            e.printStackTrace();
            }
        
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(Pfile))) {
             writer.write("ReportId , Present Date , Status");
             writer.newLine();
            for (String[] Pline : Plines) {
                writer.write(String.join(" @ ", Pline));
                writer.newLine();
            }
            } catch (IOException ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void EditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBtnActionPerformed
        // TODO add your handling code here:
        String selectedAssessment = (String) AssessmentTypeComboBox.getSelectedItem();     
        String ProjectId = studentMain.getReportId(selectedAssessment,TpNumber);
        List<String[]> lines = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(Rfile))) {
            reader.readLine();
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line.split(" @ "));
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        boolean found = false;

        // Iterate over the list of lines
        for (int i = 0; i < lines.size(); i++) {
            String[] parts = lines.get(i);
            // Check if the line contains the specific StudentId and ProjectName
            if (parts[0].equals(ProjectId)) {
                // Update the Status to the new status
                SumbitLinkTxt.setText(parts[6]);
                found = true;
                break;
            }
        }

        // If the StudentId and ProjectName are not found, print a message
        if (!found) {
            JOptionPane.showMessageDialog(null, "You cannot edit report that you haven't submitted.", "Error", JOptionPane.ERROR_MESSAGE);
        } else{
            ConfirmEditBtn.setVisible(true);
        SubmitBtn.setVisible(false);
        DeleteBtn.setVisible(false); 
        BackBtn.setVisible(false);
        }
    }//GEN-LAST:event_EditBtnActionPerformed

    private void ConfirmEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmEditBtnActionPerformed
        // TODO add your handling code here:
        String SubmitLink = SumbitLinkTxt.getText();
        String selectedAssessment = (String) AssessmentTypeComboBox.getSelectedItem();
        List<String[]> lines = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(Rfile))) {
            reader.readLine();
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line.split(" @ "));
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Iterate over the list of lines
        for (int i = 0; i < lines.size(); i++) {
            String[] parts = lines.get(i);

            // Check if the line contains the specific StudentId and ProjectName
            if (parts[0].equals(studentMain.getReportId(selectedAssessment,TpNumber))) {
                // Update the Status to the new status
                parts[6] = SubmitLink;
                break;
            }
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(Rfile))) {
             writer.write("ReportID , Feedback , Feedback2, Result1, Result2, Result, Submit Link");
             writer.newLine();
            for (String[] line : lines) {
                writer.write(String.join(" @ ", line));
                writer.newLine();
            }
        } catch (IOException ex) {
            Logger.getLogger(Student_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        SubmitBtn.setVisible(true);
        DeleteBtn.setVisible(true);
        SumbitLinkTxt.setText("");
        ConfirmEditBtn.setVisible(false);
        BackBtn.setVisible(true);
    }//GEN-LAST:event_ConfirmEditBtnActionPerformed

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        studentMain.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SubmitReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SubmitReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SubmitReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SubmitReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SubmitReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AssessmentTable;
    private javax.swing.JComboBox<String> AssessmentTypeComboBox;
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton ConfirmEditBtn;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JButton EditBtn;
    private javax.swing.JButton SubmitBtn;
    private javax.swing.JTextField SumbitLinkTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
