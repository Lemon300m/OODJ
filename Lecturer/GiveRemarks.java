/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Lecturer;

import java.io.IOException;
import java.io.*;
import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author shong
 */
public class GiveRemarks extends javax.swing.JFrame {

    /**
     * Creates new form GiveRemarks
     */
    private String tpNumber;
    ReadRemarks fnc = new ReadRemarks();
    public GiveRemarks(String tpNumber) {
        initComponents();
        this.tpNumber = tpNumber;
       tpnumTxt.setText(tpNumber);
    }

    private GiveRemarks() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        RemarkTb = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tpnumTxt = new javax.swing.JLabel();
        UpdateBtn = new javax.swing.JButton();
        statusBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Remarks");

        RemarkTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(RemarkTb);

        backBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("TP Number:");

        tpnumTxt.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tpnumTxt.setText("tpnum");

        UpdateBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UpdateBtn.setText("Update");
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        statusBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        statusBtn.setText("Change Status");
        statusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113)
                        .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(166, 166, 166)
                        .addComponent(statusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 911, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(315, 315, 315)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tpnumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(tpnumTxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                        .addGap(45, 45, 45))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        Lecturer LecturerInterface = new Lecturer();
        LecturerInterface.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    try {
    String reportFilePath = "Report.txt";
    String presentationRequestFilePath = "Remark.txt";
    fnc.writeFilteredData(reportFilePath, presentationRequestFilePath, tpNumber, RemarkTb);
    }catch (IOException e) {
        e.printStackTrace();
      }
    }//GEN-LAST:event_formWindowOpened

    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        // TODO add your handling code here:
         updateSelectedRow();
    }//GEN-LAST:event_UpdateBtnActionPerformed

    private void statusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusBtnActionPerformed
        // TODO add your handling code here:
        updateReportStatus();
    }//GEN-LAST:event_statusBtnActionPerformed
    
    private void updateReportStatus() {
    int selectedRow = RemarkTb.getSelectedRow();
    if (selectedRow != -1) {
        DefaultTableModel model = (DefaultTableModel) RemarkTb.getModel();
        String reportId = (String) model.getValueAt(selectedRow, 0); // Get the ReportID of the selected row

        File inputFile = new File("Report.txt");
        File tempFile = new File("Report_temp.txt");
        boolean reportFound = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith(reportId + " @")) {
                    // Update the status in this line
                    String[] parts = line.split(" @ ");
                    if (parts.length > 4) {
                        parts[4] = "Completed"; // Change the status to Completed
                    }
                    line = String.join(" @ ", parts);
                    reportFound = true;
                }
                writer.write(line);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating the file.");
            return;
        }

        if (reportFound) {
            if (inputFile.delete()) {
                tempFile.renameTo(inputFile);
                JOptionPane.showMessageDialog(this, "Status updated to Completed.");
            } else {
                JOptionPane.showMessageDialog(this, "Error renaming the file.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Report ID not found.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row.");
    }
}
    
    private void updateSelectedRow() {
    int selectedRow = RemarkTb.getSelectedRow();
    if (selectedRow != -1) {
        DefaultTableModel model = (DefaultTableModel) RemarkTb.getModel();
        String reportId = (String) model.getValueAt(selectedRow, 0); // Get the ReportID of the selected row

        // Get updated feedback and results from the table
        String feedback1 = (String) model.getValueAt(selectedRow, 1);
        String feedback2 = (String) model.getValueAt(selectedRow, 2);
        String result1Str = (String) model.getValueAt(selectedRow, 3);
        String result2Str = (String) model.getValueAt(selectedRow, 4);

        // Parse results to numbers
        Double result1 = result1Str.isEmpty() ? null : Double.parseDouble(result1Str);
        Double result2 = result2Str.isEmpty() ? null : Double.parseDouble(result2Str);

        // Calculate the average result, ignoring any results that are 0
        Double averageResult = null;
        if (result1 != null && result2 != null) {
            if (result1 == 0 && result2 == 0) {
                averageResult = 0.0;
            } else if (result1 == 0) {
                averageResult = result2;
            } else if (result2 == 0) {
                averageResult = result1;
            } else {
                averageResult = (result1 + result2) / 2;
            }
        } else if (result1 != null && result1 != 0) {
            averageResult = result1;
        } else if (result2 != null && result2 != 0) {
            averageResult = result2;
        } else {
            averageResult = 0.0;
        }

        // Update the average result in the table
        model.setValueAt(averageResult, selectedRow, 5);

        // Save updated data to file
        saveUpdatedData(reportId, feedback1, feedback2, result1Str, result2Str, averageResult);
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row.");
    }
}

private void saveUpdatedData(String reportId, String feedback1, String feedback2, String result1, String result2, Double averageResult) {
    String inputFilePath = "Remark.txt";
    String outputFilePath = "UpdatedRemarks.txt";

    try (BufferedReader reader = new BufferedReader(new FileReader(inputFilePath));
         PrintWriter writer = new PrintWriter(new FileWriter(outputFilePath))) {

        String line;
        boolean isFirstRow = true;

        while ((line = reader.readLine()) != null) {
            if (isFirstRow) {
                // Write the header row as is
                writer.println(line);
                isFirstRow = false;
            } else {
                String[] columns = line.split("@");
                if (columns[0].trim().equals(reportId)) {
                    // Update the row if the ReportId matches
                    columns[1] = " " + feedback1 + " ";
                    columns[2] = " " + feedback2 + " ";
                    columns[3] = " " + result1 + " ";
                    columns[4] = " " + result2 + " ";
                    columns[5] = " " + averageResult + " ";
                }
                // Write the updated or unchanged row to the output file
                writer.println(String.join("@", columns));
            }
        }

    } catch (IOException e) {
        e.printStackTrace();
    }

    // Optionally, rename the output file to the original input file
    File oldFile = new File(inputFilePath);
    File newFile = new File(outputFilePath);
    
    if (oldFile.delete()) {
        newFile.renameTo(oldFile);
    }
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GiveRemarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GiveRemarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GiveRemarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GiveRemarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GiveRemarks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable RemarkTb;
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton statusBtn;
    private javax.swing.JLabel tpnumTxt;
    // End of variables declaration//GEN-END:variables
}
